// battle.js ‚Äî –ª–æ–≥—ñ–∫–∞ —Ñ—Ä–æ–Ω—Ç—É –±–æ—é

import UserService from "../api/User.service.js";

let socket;
let playerId = null;
let gameID = null;
let playerDeck = [];
let enemyDeck = [];
let selectedCards = []; // –í–∏–±—Ä–∞–Ω—ñ –∫–∞—Ä—Ç–∏ –¥–ª—è –±–æ—é

const battleField = document.getElementById("battle-field");
const battleStatus = document.getElementById("battle-status");
const cardZone = document.getElementById("battle-cards");
const endTurnBtn = document.getElementById("end-turn-btn");

const p1NameEl = document.getElementById("p1-name");
const p2NameEl = document.getElementById("p2-name");
const p1HpEl = document.getElementById("p1-hp");
const p2HpEl = document.getElementById("p2-hp");
const p1AvatarEl = document.getElementById("p1-avatar");
const p2AvatarEl = document.getElementById("p2-avatar");

async function initWebSocket() {
  socket = new WebSocket("ws://localhost:8080/gaming");

  socket.onopen = async () => {
    console.log("üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ WebSocket");

    try {
      const user = await UserService.getUser();
      console.log("üß† –û—Ç—Ä–∏–º–∞–Ω–æ user –∑ API:", user);
      if (!user || !user.id) {
        console.error("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return;
      }
      playerId = user.id;
      username = user.username || "You";
      console.log("üë§ Player ID:", playerId);
    } catch (err) {
      console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è:", err);
      return;
    }

    const url = new URL(window.location.href);
    console.log("üåê –ü–æ—Ç–æ—á–Ω–∏–π URL:", url.href);

    const params = url.searchParams;
    gameID =
      params.get("code") || params.get("gameId") || params.get("game") || null;

    if (!gameID) {
      console.error("‚ùå –ù–µ–º–∞—î –∫–æ–¥—É –≥—Ä–∏");
      return;
    }
    console.log("üéÆ Game ID:", gameID);

    socket.send(
      JSON.stringify({
        type: "joinGame",
        payload: { gameId: gameID, playerId },
      })
    );
  };

  socket.onmessage = (event) => {
    try {
      const message = JSON.parse(event.data);
      console.log("üì® –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", message);

      if (message.event === "battle_started") handleBattleStart(message);
      else if (message.event === "battle_result") handleBattleResult(message);
      else if (message.event === "turnEnded")
        console.log("üõë –•—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è");
      else if (message.event === "turnStarted")
        console.log("‚ñ∂Ô∏è –ù–æ–≤–∏–π —Ö—ñ–¥ –¥–ª—è:", message.nextPlayer);
      else console.warn("‚ö†Ô∏è Unknown event type:", message.event);
    } catch (err) {
      console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è WebSocket:", err);
    }
  };

  socket.onerror = (error) => {
    console.error("WS Error:", error);
  };
}

function handleBattleStart(data) {
  battleStatus.classList.remove("hidden");
  battleStatus.textContent = data.message || "‚öîÔ∏è –ë—ñ–π —Ä–æ–∑–ø–æ—á–∞–≤—Å—è!";

  const gameState = data.game_state;
  if (!gameState || !gameState.decks) {
    console.warn("‚ö†Ô∏è –ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–ª–æ–¥–∏");
    return;
  }

  const p1 = gameState.decks.p1;
  const p2 = gameState.decks.p2;

  let isP1 = p1.playerId === playerId;
  const me = isP1 ? p1 : p2;
  const enemy = isP1 ? p2 : p1;

  playerDeck = me.cards;
  enemyDeck = enemy.cards;

  p1NameEl.textContent = me.username || "You";
  p2NameEl.textContent = enemy.username || "Enemy";

  p1HpEl.textContent = me.hp;
  p2HpEl.textContent = enemy.hp;

  if (me.avatar) p1AvatarEl.src = me.avatar;
  if (enemy.avatar) p2AvatarEl.src = enemy.avatar;

  console.log("üÉè Player cards:", playerDeck);
  console.log("üÉè Enemy cards:", enemyDeck);

  setTimeout(() => {
    battleStatus.classList.add("hidden");
    renderPlayerDeck();
    battleField.classList.remove("hidden");
  }, 3000);
}

function renderPlayerDeck() {
  cardZone.innerHTML = "";
  selectedCards = [];

  playerDeck.forEach((card, index) => {
    const cardElement = document.createElement("div");
    cardElement.className =
      "deck-card cursor-pointer hover:scale-105 transition";
    cardElement.innerHTML = `
      <div class="deck-image-wrapper">
        <img src="http://localhost:8080/cards/${card.image}" alt="${card.name}" class="deck-image" />
      </div>
      <div class="deck-info">
        <div class="deck-name">${card.name}</div>
        <div class="deck-stats">
          <span class="deck-stat"><i class="fas fa-fist-raised stat-attack"></i>${card.attack}</span>
          <span class="deck-stat"><i class="fas fa-shield-alt stat-defense"></i>${card.defense}</span>
        </div>
      </div>
    `;

    cardElement.addEventListener("click", () =>
      toggleCardSelection(card, cardElement)
    );
    cardZone.appendChild(cardElement);
  });
}

function toggleCardSelection(card, element) {
  const index = selectedCards.findIndex((c) => c.name === card.name);

  if (index !== -1) {
    selectedCards.splice(index, 1);
    element.classList.remove("ring", "ring-violet-400");
  } else if (selectedCards.length < 3) {
    selectedCards.push(card);
    element.classList.add("ring", "ring-violet-400");
  }

  console.log("üéØ –í–∏–±—Ä–∞–Ω—ñ –∫–∞—Ä—Ç–∏:", selectedCards);
}

endTurnBtn.addEventListener("click", () => {
  if (selectedCards.length === 0) {
    alert("–í–∏–±–µ—Ä–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–∞—Ä—Ç—É!");
    return;
  }

  socket.send(
    JSON.stringify({
      type: "endTurn",
      payload: {
        gameId: gameID,
        playerId,
        cards: selectedCards.map((c) => c.name),
      },
    })
  );

  console.log("‚úÖ –•—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–∞—Ä—Ç–∏:", selectedCards);
  endTurnBtn.disabled = true;
});

function handleBattleResult(data) {
  console.log("‚öîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–æ—é:", data);

  // todo: —Ç—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∞–Ω—ñ–º–∞—Ü—ñ–π, –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–¥–æ—Ä–æ–≤‚Äô—è

  // –ü—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–Ω–æ–≤—É –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –≤–∏–±—ñ—Ä
  endTurnBtn.disabled = false;
}

document.addEventListener("DOMContentLoaded", initWebSocket);
